@using System.Text.Json
@model FUNewsManagement_FE.Controllers.NewsController.NewsArticleCreateRequest
@using static FUNewsManagement_FE.Controllers.NewsController
<h2>Create News</h2>
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers

<form asp-action="Create" method="post">
    <div class="mb-3">
        <label asp-for="NewsTitle" class="form-label"></label>
        <input asp-for="NewsTitle" class="form-control" />
        <span asp-validation-for="NewsTitle" class="text-danger"></span>
    </div>

    <div class="mb-3">
        <label asp-for="Headline" class="form-label"></label>
        <input asp-for="Headline" class="form-control" />
        <span asp-validation-for="Headline" class="text-danger"></span>
    </div>

    <div class="mb-3">
        <label asp-for="NewsContent" class="form-label"></label>
        <textarea asp-for="NewsContent" class="form-control" rows="5" id="NewsContent"></textarea>
        <span asp-validation-for="NewsContent" class="text-danger"></span>
    </div>

    <div class="mb-3">
        <label asp-for="NewsSource" class="form-label"></label>
        <input asp-for="NewsSource" class="form-control" />
        <span asp-validation-for="NewsSource" class="text-danger"></span>
    </div>

    <div class="mb-3">
        <label asp-for="CategoryId" class="form-label"></label>
        <select asp-for="CategoryId" class="form-select" asp-items="ViewBag.Categories"></select>
        <span asp-validation-for="CategoryId" class="text-danger"></span>
    </div>

    <div class="mb-3">
        <label asp-for="NewsStatus" class="form-label"></label>
        <select asp-for="NewsStatus" class="form-select" asp-items="ViewBag.StatusList"></select>
    </div>

    <div class="mb-3">
        <label>Tags</label>
        <select asp-for="TagIds" class="form-select" multiple id="tagSelect">
            @foreach (var t in ViewBag.Tags as List<FUNewsManagement_FE.Controllers.NewsController.TagDto>)
            {
                <option value="@t.TagId">@t.TagName</option>
            }
        </select>
        <div id="selectedTags" class="mt-2"></div>
        <div id="suggestedTags" class="mt-2"></div>
    </div>
   
    <button type="button" class="btn btn-secondary mb-3" id="suggestTagsBtn">Suggest Tag</button>
    <br />
    <button type="submit" class="btn btn-primary">Create</button>
    <a asp-action="Index" class="btn btn-secondary">Cancel</a>
</form>

@section Scripts {
    <script src="https://code.jquery.com/jquery-3.7.0.min.js"></script>
<script>
            document.addEventListener('DOMContentLoaded', () => {
            renderSelectedTags();
        });

const tags = @Html.Raw(JsonSerializer.Serialize(ViewBag.Tags));
const tagSelect = document.getElementById('tagSelect');
const suggestedDiv = document.getElementById('suggestedTags');
               function renderSelectedTags() {
                   console.log("Add");
                    const selectedDiv = document.getElementById('selectedTags');
                    selectedDiv.innerHTML = '';
                    const selectedIds = Array.from(tagSelect.selectedOptions).map(o => parseInt(o.value));
                    selectedIds.forEach(id => {
                        const tag = tags.find(t => t.TagId === id);
                        if (!tag) return;
                        const badge = document.createElement('span');
                        badge.textContent = tag.TagName + ' ×';
                        badge.className = 'badge bg-primary me-1 mb-1';
                        badge.style.cursor = 'pointer';
                        badge.title = 'Click to remove';
                        badge.addEventListener('click', () => {
                            // Bỏ chọn
                            const newIds = Array.from(tagSelect.selectedOptions)
                                                .map(o => parseInt(o.value))
                                                .filter(v => v !== id);
                            for (let o of tagSelect.options) {
                                o.selected = newIds.includes(parseInt(o.value));
                            }
                            renderSelectedTags();
                        });
                        selectedDiv.appendChild(badge);
                    });
                }
        function renderSuggestedChips(suggestedTags) {
            suggestedDiv.innerHTML = '';
            suggestedTags.forEach(t => {
                const chip = document.createElement('span');
                chip.textContent = t.tagName; // Hiển thị tagName
                chip.className = 'badge bg-info me-1 mb-1';
                chip.style.cursor = 'pointer';
                chip.title = 'Click to add';
                                chip.addEventListener('click', () => {
            const tag = tags.find(x => x.TagName.trim().toLowerCase() === t.tagName.trim().toLowerCase());

                            console.log(tag);
                    if (!tag) return;
                    const selectedIds = Array.from(tagSelect.selectedOptions).map(o => parseInt(o.value));
                    if (!selectedIds.includes(tag.TagId)) {
                                console.log("Add tag:", tag.TagId);
                        selectedIds.push(tag.TagId);
                        for (let o of tagSelect.options) {
                            o.selected = selectedIds.includes(parseInt(o.value));
                        }
                        renderSelectedTags(); // cập nhật hiển thị badges
                    }
                    renderSelectedTags(); // cập nhật hiển thị badges

                });
                suggestedDiv.appendChild(chip);
            });
        }


document.getElementById('suggestTagsBtn').addEventListener('click', async () => {
    const content = document.getElementById('NewsContent').value;
    if (!content) return alert('Please enter content first');

    try {
                const res = await fetch('http://localhost:5043/api/ai/suggest-tags', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ content })
        });
        if (!res.ok) throw new Error(res.statusText);
        const data = await res.json();
        const suggestedNames = data.tags || [];
        renderSuggestedChips(suggestedNames);
    } catch(err) {
        console.error(err);
        alert('Error suggesting tags');
    }
});
 


</script>
}


